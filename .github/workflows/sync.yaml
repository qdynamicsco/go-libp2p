name: Sync Upstream & Publish Patched Tags

on:
  workflow_dispatch: # Manual trigger
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC

permissions: write-all # Required for pushing tags

jobs:
  sync-and-publish: # Renamed job for clarity
    runs-on: ubuntu-latest

    steps:
      - name: Checkout fork's default branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history is safer for tag operations

      - name: Setup Git User
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Copy patch file to temporary location
        run: |
          # Ensure the patch file exists before copying
          if [ ! -f upstream.diff ]; then
            echo "Error: upstream.diff not found in the default branch!"
            exit 1
          fi
          echo "Copying patch file..."
          cp upstream.diff /tmp/upstream.diff # Copy to /tmp

      - name: Add Upstream Remote and Fetch Tags
        run: |
          git remote add upstream https://github.com/libp2p/go-libp2p.git
          # Fetch upstream tags, potentially overwriting local refs if they conflict (unlikely for tags unless fetched before)
          # Also fetch the upstream main/master to ensure tag base commits are present
          git fetch upstream --tags --force
          # Attempt to fetch default branch in case tags are based off recent commits not yet tagged
          git fetch upstream $(git remote show upstream | grep 'HEAD branch' | cut -d' ' -f5) --depth 1 || echo "Could not fetch upstream default branch, continuing..."

      - name: Sync fork tags with upstream (removing any fork-only tags)
        run: |
          set -eux

          # Step 1: Get clean lists of tags from both remotes
          echo "Fetching tags from remotes..."
          upstream_tags=$(git ls-remote --tags --refs upstream | awk '{print $2}' | sed 's|refs/tags/||' | sort)
          origin_tags=$(git ls-remote --tags --refs origin | awk '{print $2}' | sed 's|refs/tags/||' | sort)
          
          echo "Found $(echo "$origin_tags" | wc -l) tags in fork (origin)"
          echo "Found $(echo "$upstream_tags" | wc -l) tags in upstream"
          
          # Step 2: Identify tags that exist ONLY in the fork (origin) but not in upstream
          echo "Identifying fork-only tags for removal..."
          tags_to_prune=""
          for tag in $origin_tags; do
            if ! echo "$upstream_tags" | grep -Fxq "$tag"; then
              echo "üîç Found fork-only tag: '$tag' (will be pruned)"
              tags_to_prune="$tags_to_prune $tag"
            fi
          done
          
          # Step 3: Delete fork-only tags that aren't in upstream
          if [ -n "$tags_to_prune" ]; then
            echo "üóëÔ∏è Pruning $(echo "$tags_to_prune" | wc -w) tags from fork that don't exist in upstream..."
            for tag in $tags_to_prune; do
              echo "  - Deleting: $tag"
              git push origin ":refs/tags/$tag" || echo "    (Failed to delete, continuing)"
            done
          else
            echo "‚úÖ No fork-only tags found to prune"
          fi
          
          # Step 4: Update local git with clean data
          git fetch upstream --tags
          echo "Tag sync complete!"

      - name: Process upstream tags, apply patch, and publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e # Exit script on first error

          # Get upstream tags (like vX.Y.Z). Filter out any potential 'patched-' tags just in case.
          upstream_tags=$(git tag --list 'v*' --sort='v:refname' | grep -v "^patched-")
          origin_tags=$(git ls-remote --tags origin | awk '{print $2}' | awk -F/ '{print $3}')

          for tag in $upstream_tags; do
            target_tag="$tag"
            temp_branch="patching-$tag"

            if echo "$origin_tags" | grep -Fxq "$target_tag"; then
              echo "‚úÖ Target tag $target_tag already exists remotely on origin. Skipping."
              git checkout main
              continue
            fi

            echo "üöÄ Processing upstream tag: $tag"
            git checkout -B "$temp_branch" "refs/tags/$tag"

            if ! git apply --check --ignore-whitespace /tmp/upstream.diff; then
               echo "‚ùå Patch does not apply cleanly to $tag. Skipping."
               git checkout main
               git branch -D "$temp_branch"
               continue
            fi

            git apply --ignore-whitespace /tmp/upstream.diff

            if git diff --quiet HEAD; then
               echo "‚ö†Ô∏è Patch applied but resulted in no changes for $tag. Skipping."
               git checkout main
               git branch -D "$temp_branch"
               continue
            fi

            rm -rf .github/
            git add .
            git commit -m "Build: Apply custom patch on top of $tag" --allow-empty
            git tag -f $target_tag

            echo "Pushing temporary branch $temp_branch to origin to upload commit objects"
            git push origin "$temp_branch"

            echo "Pushing target tag $target_tag to origin"
            git push origin "refs/tags/$target_tag" --force

            echo "Cleaning up remote and local branch $temp_branch"
            git push origin --delete "$temp_branch"
            git checkout main
            git branch -D "$temp_branch"
          done
          echo "‚úÖ Tag processing complete."
